<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.toutiao.officedict.dao.mapper.mapping.HouseCommunityNotMatchMapper" >
  <resultMap id="BaseResultMap" type="com.toutiao.officedict.dao.entity.mapping.HouseCommunityNotMatch" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="community_id" property="communityId" jdbcType="VARCHAR" />
    <result column="community_name" property="communityName" jdbcType="VARCHAR" />
    <result column="of_company" property="ofCompany" jdbcType="VARCHAR" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
    <result column="creator_id" property="creatorId" jdbcType="VARCHAR" />
    <result column="updater_id" property="updaterId" jdbcType="VARCHAR" />
    <result column="city_id" property="cityId" jdbcType="INTEGER" />
    <result column="status" property="status" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, community_id, community_name, of_company, create_time, update_time, creator_id, 
    updater_id, city_id
  </sql>
  <select id="getCompanys" resultType="java.lang.String">
       SELECT DISTINCT of_company FROM house_community_not_match_history
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from house_community_not_match_history
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from house_community_not_match_history
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.toutiao.officedict.dao.entity.mapping.HouseCommunityNotMatch" >
    insert into house_community_not_match_history (id, community_id, community_name, 
      of_company, create_time, update_time, 
      creator_id, updater_id, city_id
      )
    values (#{id,jdbcType=INTEGER}, #{communityId,jdbcType=VARCHAR}, #{communityName,jdbcType=VARCHAR}, 
      #{ofCompany,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, 
      #{creatorId,jdbcType=VARCHAR}, #{updaterId,jdbcType=VARCHAR}, #{cityId,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.toutiao.officedict.dao.entity.mapping.HouseCommunityNotMatch" >
    insert into house_community_not_match_history
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="communityId != null" >
        community_id,
      </if>
      <if test="communityName != null" >
        community_name,
      </if>
      <if test="ofCompany != null" >
        of_company,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="updateTime != null" >
        update_time,
      </if>
      <if test="creatorId != null" >
        creator_id,
      </if>
      <if test="updaterId != null" >
        updater_id,
      </if>
      <if test="cityId != null" >
        city_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="communityId != null" >
        #{communityId,jdbcType=VARCHAR},
      </if>
      <if test="communityName != null" >
        #{communityName,jdbcType=VARCHAR},
      </if>
      <if test="ofCompany != null" >
        #{ofCompany,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="creatorId != null" >
        #{creatorId,jdbcType=VARCHAR},
      </if>
      <if test="updaterId != null" >
        #{updaterId,jdbcType=VARCHAR},
      </if>
      <if test="cityId != null" >
        #{cityId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.toutiao.officedict.dao.entity.mapping.HouseCommunityNotMatch" >
    update house_community_not_match_history
    <set >
      <if test="status != null" >
        status = #{status,jdbcType=INTEGER},
      </if>
    </set>
    where 1=1
    <if test="cityId != null and cityId != ''">
      and city_id = #{cityId,jdbcType=INTEGER}
    </if>
    <if test="company != null and company != ''">
      and of_company = #{company,jdbcType=VARCHAR}
    </if>
    <if test="communityName != null or communityName != ''">
      and community_name  LIKE CONCAT('%', #{communityName}, '%')
    </if>
  </update>
  <update id="updateByPrimaryKey" parameterType="com.toutiao.officedict.dao.entity.mapping.HouseCommunityNotMatch" >
    update house_community_not_match_history
    set community_id = #{communityId,jdbcType=VARCHAR},
      community_name = #{communityName,jdbcType=VARCHAR},
      of_company = #{ofCompany,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      creator_id = #{creatorId,jdbcType=VARCHAR},
      updater_id = #{updaterId,jdbcType=VARCHAR},
      city_id = #{cityId,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="listNotMatch" resultType="com.toutiao.officedict.domain.mapping.NotMatchModel"
          parameterType="com.toutiao.officedict.domain.query.mapping.NotMatchQuery">
    select
    id AS id,
    community_id AS communityId,
    community_name AS communityName,
    of_company AS ofCompany,
    city_id AS cityId,
    status AS status
    from house_community_not_match_history
    where 1=1
    <if test="cityId != null and cityId != ''">
      and city_id = #{cityId,jdbcType=INTEGER}
    </if>
    <if test="company != null and company != ''">
      and of_company = #{company,jdbcType=VARCHAR}
    </if>
    <if test="status != null">
      and status = #{status,jdbcType=INTEGER}
    </if>
    <if test="company == null or company == ''">
      and of_company != '中原地产'
    </if>
    <if test="communityName != null or communityName != ''">
      and community_name  LIKE CONCAT('%', #{communityName}, '%')
    </if>
  </select>
  <select id="selectNotMatch" resultType="com.toutiao.officedict.domain.mapping.NotMatchModel"
          parameterType="INTEGER">
    select
    id AS id,
    community_id AS communityId,
    community_name AS communityName,
    of_company AS ofCompany,
    city_id AS cityId,
    status AS status
    from house_community_not_match_history
    where id = #{id,jdbcType=INTEGER}
  </select>

</mapper>